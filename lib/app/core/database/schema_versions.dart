import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class _S2 extends i0.VersionedSchema {
  _S2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    userAccounts,
    taskActivityRecords,
    taskActivityGoals,
    planRoutines,
  ];
  late final Shape0 userAccounts = Shape0(
      source: i0.VersionedTable(
        entityName: 'user_accounts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 taskActivityRecords = Shape1(
      source: i0.VersionedTable(
        entityName: 'task_activity_records',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 taskActivityGoals = Shape2(
      source: i0.VersionedTable(
        entityName: 'task_activity_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_14,
          _column_15,
          _column_16,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 planRoutines = Shape3(
      source: i0.VersionedTable(
        entityName: 'plan_routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_17,
          _column_18,
          _column_8,
          _column_10,
          _column_19,
          _column_20,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get userAccountId =>
      columnsByName['user_account_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get weight =>
      columnsByName['weight']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get onboardingStatus =>
      columnsByName['onboarding_status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get dateOfBirth =>
      columnsByName['date_of_birth']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get createdTime =>
      columnsByName['created_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastUpdatedTime =>
      columnsByName['last_updated_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('user_account_id', aliasedName, true,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('display_name', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<double> _column_2(String aliasedName) =>
    i1.GeneratedColumn<double>('weight', aliasedName, true,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('onboarding_status', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_4(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date_of_birth', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_5(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_6(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('last_updated_time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get taskActivityRecordId =>
      columnsByName['task_activity_record_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get drinkType =>
      columnsByName['drink_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get quantity =>
      columnsByName['quantity']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get userAccountId =>
      columnsByName['user_account_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdTime =>
      columnsByName['created_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastUpdatedTime =>
      columnsByName['last_updated_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>('task_activity_record_id', aliasedName, true,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('drink_type', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('quantity', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('user_account_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES user_accounts (user_account_id)'));
i1.GeneratedColumn<DateTime> _column_11(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_time', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_12(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('last_updated_time', aliasedName, true,
        type: i1.DriftSqlType.dateTime);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get taskActivityGoalId =>
      columnsByName['task_activity_goal_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get goalType =>
      columnsByName['goal_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get goalValue =>
      columnsByName['goal_value']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get status =>
      columnsByName['status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userAccountId =>
      columnsByName['user_account_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get createdTime =>
      columnsByName['created_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastUpdatedTime =>
      columnsByName['last_updated_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('task_activity_goal_id', aliasedName, true,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('goal_type', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<double> _column_15(String aliasedName) =>
    i1.GeneratedColumn<double>('goal_value', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('status', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get planRoutineId =>
      columnsByName['plan_routine_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get planRoutineName =>
      columnsByName['plan_routine_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get drinkType =>
      columnsByName['drink_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get userAccountId =>
      columnsByName['user_account_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get notificationStatus =>
      columnsByName['notification_status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get time =>
      columnsByName['time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get createdTime =>
      columnsByName['created_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastUpdatedTime =>
      columnsByName['last_updated_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('plan_routine_id', aliasedName, true,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('plan_routine_name', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('notification_status', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_20(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

final class _S3 extends i0.VersionedSchema {
  _S3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    userAccounts,
    taskActivityRecords,
    taskActivityGoals,
    planRoutines,
  ];
  late final Shape0 userAccounts = Shape0(
      source: i0.VersionedTable(
        entityName: 'user_accounts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 taskActivityRecords = Shape1(
      source: i0.VersionedTable(
        entityName: 'task_activity_records',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 taskActivityGoals = Shape2(
      source: i0.VersionedTable(
        entityName: 'task_activity_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_14,
          _column_15,
          _column_16,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 planRoutines = Shape3(
      source: i0.VersionedTable(
        entityName: 'plan_routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_17,
          _column_18,
          _column_8,
          _column_10,
          _column_19,
          _column_20,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

final class _S4 extends i0.VersionedSchema {
  _S4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    userAccounts,
    taskActivityRecords,
    taskActivityGoals,
    planRoutines,
  ];
  late final Shape4 userAccounts = Shape4(
      source: i0.VersionedTable(
        entityName: 'user_accounts',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_21,
          _column_22,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 taskActivityRecords = Shape1(
      source: i0.VersionedTable(
        entityName: 'task_activity_records',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 taskActivityGoals = Shape2(
      source: i0.VersionedTable(
        entityName: 'task_activity_goals',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_14,
          _column_15,
          _column_16,
          _column_10,
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 planRoutines = Shape3(
      source: i0.VersionedTable(
        entityName: 'plan_routines',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_17,
          _column_18,
          _column_8,
          _column_10,
          _column_19,
          _column_20,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get userAccountId =>
      columnsByName['user_account_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get weight =>
      columnsByName['weight']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get onboardingStatus =>
      columnsByName['onboarding_status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get dateOfBirth =>
      columnsByName['date_of_birth']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get sleepTime =>
      columnsByName['sleep_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get wakeUpTime =>
      columnsByName['wake_up_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get createdTime =>
      columnsByName['created_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get lastUpdatedTime =>
      columnsByName['last_updated_time']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<DateTime> _column_21(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('sleep_time', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_22(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('wake_up_time', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, _S2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, _S3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, _S4 schema) from3To4,
}) {
  return i1.Migrator.stepByStepHelper(step: (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = _S2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = _S3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = _S4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  });
}
